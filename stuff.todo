✔ move client to `@skribble-css/client` @done(22-02-17 05:26)
✔ move native code from `@skribble-css/core` to `skribble-css` @done(22-02-17 05:26)
✔ use default typescript config to generate config json file for testing @done(22-02-17 06:34)
✔ Install `onething` by sindresorhus @done(22-02-17 14:55)

✔ get css variables from the `CssVariables` struct @done(22-02-18 11:14)
✔ add support for generating nested css variables @done(22-02-18 11:14)
☐ write tests for nested css variables to ensure it works
✔ store the `groups` a `ClassName` belongs to @done(22-02-19 00:55)
✔ get the CssVariables from a `group` @done(22-02-18 15:06)

✔ add svg filter support @done(22-02-19 05:04)
✔ add to typescript @done(22-02-17 21:03)
✔ add to rust user configuration @done(22-02-17 21:03)
✔ add to generated css @done(22-02-19 05:04)
☐ add tests that shows it works
Store the filters in a css variable and reference the filter
```css
--custom-filter: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg"><filter id="waves" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB"><feTurbulence type="turbulence" baseFrequency="0.01 0.01" numOctaves="1" seed="1" stitchTiles="noStitch" result="turbulence"/><feDisplacementMap in="SourceGraphic" in2="turbulence" scale="20" xChannelSelector="G" yChannelSelector="A"result="displacementMap"/></filter></svg>#waves');
filter: var(--custom-filter);
```
✔ add keyframes support @done(22-02-19 05:04)
  ✔ support collecting `css_variables` @done(22-02-19 05:04)
  ✔ Check if keyframes can be nested in media queries (they can't) @done(22-02-17 04:32)
  Instead css variable can be used so there should be a top level keyframes object
  ✔ add to rust user configuration @done(22-02-17 21:03)
  ✔ add to typescript @done(22-02-17 21:03)
  ✔ add to generated css @done(22-02-19 05:04)
  ☐ add tests that shows it works

☐ create napi.rs node structure with
  ☐ generate from a string
  ☐ generate css and typescript from a single file (filename)
  ☐ bundle from entrypoint (automatically gathers entrypoints)
  ☐ generate from glob
  ☐ watch files and generate

☐ Add support for global styles e.g. `prose.$` and `prose.$2x` where a css block is inserted.
☐ add some animation configurations
☐ add keyframes section of config
☐ add similar to support for icons to `unocss`
☐ use `@parcel/css` as example for rust based cli api
